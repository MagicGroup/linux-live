#!/bin/bash 
# Linux Live Kit version 7
# 构建用脚本

# 添加执行文件的路径
export PATH=.:./tools:../tools:/usr/sbin:/usr/bin:/sbin:/bin:/

# 进入制作脚本的实际路径
CHANGEDIR=$(dirname $(readlink -f $0))
echo "Changing current directory to $CHANGEDIR"
CWD="$(pwd)"
cd $CHANGEDIR

# 引入 .config 和 livekitlib
. ./.config || exit 1
. ./livekitlib || exit 1

# 只允许 root 运行脚本，函数都定义在 livekitlib 中。
# only root can continue, because only root can read all files from your system
allow_only_root

# 检查 mksquashfs 是否支持 xz 压缩
# check for mksquashfs with xz compression
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   echo "mksquashfs not found or doesn't support -comp xz, aborting, no changes made"
　 echo "mksquashfs 不支持 -comp xz 参数，退出，没有任何更改"
   exit 1
fi

# 构建 initramfs 镜像
# build initramfs image
echo "Building intramfs image..."
echo "创建 initramfs 镜像..."
# 进入 initramfs 目录
cd initramfs
# 使用 initramfs_create 脚本
INITRAMFS=$(./initramfs_create "$LIVEKITNAME")
cd ..

# 创建 live 的文件系统
# create live kit filesystem (cpio archive)
# 删除临时目录
rm -Rf "$LIVEKITDATA"
if [ $USEKITNAME = "1" ] ; then
	BOOT="$LIVEKITDATA"/"$LIVEKITNAME"/BOOT
else
	BOOT="$LIVEKITDATA"/BOOT
fi
echo $BOOT
mkdir -p "$BOOT"
mkdir -p "$LIVEKITDATA"/"$LIVEKITNAME"
if [ $USEKITNAME = "0" ] ; then
	mkdir -p "$BOOT"/../changes
	mkdir -p "$BOOT"/../modules
else
        mkdir -p "LIVEKITDATA"/"$LIVEKITNAME"/changes
        mkdir -p "LIVEKITDATA"/"$LIVEKITNAME"/modules
fi
mv "$INITRAMFS" $BOOT/initrfs.img
if [ $USEGRUB = "1" ]; then
	cp -r bootfiles/* $BOOT
else
	cp bootfiles/* $BOOT
fi
if [ $USEKITNAME = "1" ] ;then
	cat bootfiles/syslinux.cfg | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" > $BOOT/syslinux.cfg
	cat bootfiles/bootinst.bat | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" | sed -r "s:\\\\boot\\\\:\\\\$LIVEKITNAME\\\\boot\\\\:" > $BOOT/bootinst.bat
else
echo "USEKITNAME=0"
fi
cp $VMLINUZ $BOOT/vmlinuz

# 如果已经存在模块，就直接拷贝
if [ -d sb ]; then
   cp sb/* $LIVEKITDATA/$LIVEKITNAME/
else
   # 否则就压缩相应的模块，模块列表是 MKMOD 变量
   # create compressed bundles
   for i in $MKMOD; do
      mksquashfs /$i $LIVEKITDATA/$LIVEKITNAME/$i.$BEXT -comp xz -b 512k -keep-as-directory -ef $EXCLUDELIST
   done
fi

# 复制 rootcopy 文件夹
# copy rootcopy folder
if [ -d rootcopy ]; then
   cp -a rootcopy $LIVEKITDATA/$LIVEKITNAME/
fi

# 创建光盘镜像
# create ISO for CD image
echo "Creating ISO file for CD boot..."
echo "创建可启动的光盘 ISO 镜像..."
cd "$LIVEKITDATA"
# 默认目标路径，需要按情况修改
TARGET=/mnt/z
if [ ! -d $TARGET ]; then
# 不改的话，默认是 /tmp 目录，请注意 /tmp 的大小
   TARGET=/tmp
fi

# 判断机器架构，目前仅支持 i686 和 x86_64
ARCH=$(uname -m)


# 制作 iso，支持 grub4dos 和 syslinux
if [ $USEGRUB = "1" ];then
	MKISOFSB="-b BOOT/GRUB/grldr"
	MKISOFSC="-c BOOT/boot.catalog"
else
	MKISOFSB="-b BOOT/isolinux.bin"
	MKISOFSC="-c BOOT/isolinux.boot"
fi
if [ $USEKITNAME = "1" ]; then
	mkisofs -o "$TARGET/$LIVEKITNAME-$ARCH.iso" -v -J -R -D -A "$LIVEKITNAME" -V "$LIVEKITNAME" \
	-no-emul-boot -boot-info-table -boot-load-size 4 \
	-b "$LIVEKITNAME"/boot/isolinux.bin -c "$LIVEKITNAME"/boot/isolinux.boot . \
	>/dev/null 2>/dev/null
else
        mkisofs -o "$TARGET/$LIVEKITNAME-$ARCH.iso" -v -J -R -D -A "$LIVEKITNAME" -V "$LIVEKITNAME" \
       	-no-emul-boot -boot-info-table -boot-load-size 4 \
 	$MKISOFSB $MKISOFSC . \
	>/dev/null 2>/dev/null
fi

# 生成 readme.txt 文件
cat "$CWD/bootinfo.txt" | fgrep -v "#" | sed -r "s/mylinux/$LIVEKITNAME/" | sed -r "s/\$//" > readme.txt
# 生成U盘和硬盘启动的压缩包
echo "Creating ZIP for USB boot..."
echo "创建 USB 启动用的压缩包..."
rm -f "$TARGET/$LIVEKITNAME-$ARCH.zip"
zip -0 -r "$TARGET/$LIVEKITNAME-$ARCH.zip" *

cd ..
rm -Rf "$LIVEKITDATA"
echo "finished. Find your result in $TARGET"
echo "制作完成，可以在 $TARGET 中找到制作成果"
